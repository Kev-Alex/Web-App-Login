version: "3.9"

services:
  # ───────────────────────────────────────────────
  # 1️⃣ SERVICIO DE BASE DE DATOS - PostgreSQL
  # ───────────────────────────────────────────────
  db:
    image: postgres:16
    container_name: login_db
    environment:
      POSTGRES_DB: login_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/seed.sql:/docker-entrypoint-initdb.d/seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d login_db"]
      interval: 5s
      timeout: 5s
      retries: 20
    labels:
      - "app.role=database"

  # ───────────────────────────────────────────────
  # 2️⃣ SERVICIO DE BACKEND - FastAPI
  # ───────────────────────────────────────────────
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: login_backend
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/login_db
      APP_HOST: 0.0.0.0
      APP_PORT: 8081
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8081:8081"
    restart: unless-stopped
    labels:
      - "app.role=api"

  # ───────────────────────────────────────────────
  # 3️⃣ SERVICIO DE FRONTEND - Nginx
  # ───────────────────────────────────────────────
  frontend:
    build:
      context: ./frontend
    container_name: login_frontend
    depends_on:
      - backend
    ports:
      - "8080:80"
    restart: unless-stopped
    labels:
      - "app.role=frontend"

# ───────────────────────────────────────────────
# 4️⃣ VOLUMENES PERSISTENTES
# ───────────────────────────────────────────────
volumes:
  pgdata:
